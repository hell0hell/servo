#ifndef __REM_VIB_FREQ_H_
/****************************************************************************************************/
/*																									*/
/*																									*/
/*		RemVibFreq.c : 残留振動周波数計算処理定義													*/
/*																									*/
/*																									*/
/*																									*/
/************** Copyright (C) Yaskawa Electric Corporation ******************************************/
/*																									*/
/*	Note	:	初版	2011.02.01	Y.Oka	For INGRAM												*/
/*																									*/
/*	Log		:	Ver1.00																				*/
/*																									*/
/****************************************************************************************************/



/****************************************************************************************************/
/*		STRUCT DEFINITION																			*/
/****************************************************************************************************/
/*--------------------------------------------------------------------------------------------------*/
/*		残留振動周波数算出用データ型定義															*/
/*--------------------------------------------------------------------------------------------------*/
typedef	struct REMVIBFREQ {					/* 残留振動周波数モニタ用パラメータ＆変数定義			*/
	struct {								/* 残留振動周波数モニタ用パラメータ定義					*/
		LONG	RemVibDetWidth;					/* 残留振動周波数検出幅			[pulse]				*/
		LONG	RemVibFil;						/* 残留振動周波数検出用位置偏差フィルタ周波数[Hz]	*/
	} conf;
	/*----------------------------------------------------------------------------------------------*/
	struct {								/* 残留振動周波数モニタ用変数データ定義					*/
		SHORT	State;							/* 状態ステータス									*/
		SHORT	Dir;							/* 現在の実移動方向 								*/
		SHORT	RevCnt;							/* 反転回数											*/
		SHORT	Dummy;							/* For Alignment									*/
		ULONG	TimeOutCtr;						/* タイムアウトカウンタ 							*/
		ULONG	PeakCntTimer;					/* 残留振動時間測定用タイマ							*/
		ULONG	PeakCnt;						/* 残留振動時間カウンタ	現在						*/
		ULONG	LastPeakCnt;					/* 残留振動時間カウンタ	1回前						*/
		ULONG	LLastpeakCnt;					/* 残留振動時間カウンタ	2回前（同じ方向の1個前）	*/
		LONG	PeakValue;						/* オーバーシュート量			[pulse]				*/
		ULONG	FreqCnt;						/* 残留振動周波数カウンタ							*/
		LONG	LastPosErr;						/* 前回位置偏差					[pulse]				*/
		LONG	PosErrFilOut;					/* フィルタ処理後位置偏差		[pulse]				*/
		LONG	PosErrFilOut2;					/* フィルタ処理後位置偏差		[pulse]				*/
		ULONG	MeanDeno;						/* 重み付平均化の分母 								*/
	} var;
	/*----------------------------------------------------------------------------------------------*/
	struct {								/* 残留振動周波数モニタデータ定義 <S0DA>				*/
		LONG	UnRvibFrequency;				/* Un107 : 残留振動周波数		[0.1Hz]				*/
	} mon;
} REMVIBFREQ;



/****************************************************************************************************/
/*		DEFINES																						*/
/****************************************************************************************************/
/*--------------------------------------------------------------------------------------------------*/
/*		残留振動検出用定義																			*/
/*--------------------------------------------------------------------------------------------------*/
#define REMVIB_CYCLEMS		(KPI_SCCYCLEMS)			/* 最小出力周波数カウンタ値(1Hz)				*/
#define REMVIB_MINOUT		(1000/REMVIB_CYCLEMS)	/* 最小出力周波数カウンタ値(1Hz)				*/
#define REMVIB_MINDET		(REMVIB_MINOUT*12/10)	/* 最小検出周波数カウンタ値(1.2Hz)				*/
#define REMVIB_MINDETWIDTH	3						/* 最小検出幅					[pulse]			*/
#define REMVIB_FILFREQ		5000					/* 残留振動検出フィルタ周波数	[0.1Hz]			*/
#define REMVIB_WEIGHT_NUME	12						/* 平均化重み付け分子							*/
#define REMVIB_WEIGHT_DENO	10						/* 平均化重み付け分母 							*/
#define REMVIB_DENO_OFFSET	1000					/* 平均化重み積算の単位 100ならば100分の1		*/
#define REMVIB_TIMEOUT		(REMVIB_MINDET/REMVIB_CYCLEMS)
													/* タイムアウト時間				[ms]			*/
/*--------------------------------------------------------------------------------------------------*/
/*	残留振動検出シーケンス定義																		*/
/*--------------------------------------------------------------------------------------------------*/
enum REMVIBSEQ {
	RVM_INIT		= 0,					/* 初期化												*/
	RVM_COIN,								/* 位置決め完了待ち										*/
	RVM_PEAKCHK_F,							/* ピーク検出(振動周波数検出前)							*/
	RVM_PEAKCHK_L,							/* ピーク検出(振動周波数検出開始)						*/
	RVM_COMP,								/* 振動周波数計算										*/
};



/****************************************************************************************************/
/*		PROTOTYPE																					*/
/****************************************************************************************************/
void	RemVibChkCondition( REMVIBFREQ *RemVibFreq, BOOL PosCtrlMode );
void	RemVibCalculateFreq( REMVIBFREQ *RemVibFreq, LONG CtrlPosErr, BOOL CoinSts, BOOL RefzSts );

/****************************************************************************************************/
/*		API																							*/
/****************************************************************************************************/
LONG	RemVibGetRemVibFreq( REMVIBFREQ *RemVibFreq );
void	RemVibCalculateMonitorPrm( REMVIBFREQ *RemVibFreq, EGEAR *Egear,
    	                           USHORT remdetw, LONG CoinLevel, LONG ScanTime );
void	RemVibRsetRemVibrationFreq( REMVIBFREQ *RemVibFreq );

#define __REM_VIB_FREQ_H_
#endif /* __REM_VIB_FREQ_H_ */
/***************************************** end of file **********************************************/
