/****************************************************************************************************/
/*																									*/
/*																									*/
/*		Pgm.h : Program Table Header File															*/
/*																									*/
/*																									*/
/****************************************************************************************************/
/*																									*/
/*																									*/
/*		1. Pgm Constant Definition																	*/
/*																									*/
/*		2. Pgm Struct Definition																	*/
/*																									*/
/*		3. Pgm Variable Extern Declaration															*/
/*																									*/
/*		4. Local Function Prototype Definition														*/
/*																									*/
/*																									*/
/*																									*/
/*																									*/
/*																									*/
/************** Copyright (C) Yaskawa Electric Corporation ******************************************/
/*																									*/
/*		Rev.1.00 : 2012.08.28  K.Ozaki																*/
/*																									*/
/*																									*/
/****************************************************************************************************/

/****************************************************************************************************/
/*																									*/
/*	Pgm Common Definitons																			*/
/*																									*/
/****************************************************************************************************/
#define PGM_N_PGM 	(64)					/* Maximum Program Table Number 						*/

/*--------------------------------------------------------------------------------------------------*/
/*	PGM Version Definition																			*/
/*--------------------------------------------------------------------------------------------------*/
#define VERCHK_PGM (0x0002)                 /* TODO: Version管理仕様決め */

/*--------------------------------------------------------------------------------------------------*/
/*	PGM Initial load return code type																*/
/*--------------------------------------------------------------------------------------------------*/
typedef UINT PGM_INITLOAD;
#define PGM_INITLOAD_SUMWRONG	(1<<0)                             /* bit0: sumcheck error */
#define PGM_INITLOAD_INVALID	(1<<1)                             /* bit1: exceeded value */
#define PGM_INITLOAD_VERUNMATCH	(1<<2)                             /* bit2: version unmatch */

/****************************************************************************************************/
/*																									*/
/*	Program Table enum Definition																	*/
/*																									*/
/****************************************************************************************************/
/*--------------------------------------------------------------------------------------------------*/
/*	Position prefix																					*/
/*--------------------------------------------------------------------------------------------------*/
typedef enum enum_PGM_POSPREFIX
{
	PGM_POSPREFIX_STOP,
	PGM_POSPREFIX_ABS,
	PGM_POSPREFIX_INC,
	PGM_POSPREFIX_PINFINITE,
	PGM_POSPREFIX_MINFINITE,
	PGM_POSPREFIX_NONE,
	PGM_POSPREFIX_ASTOP,
} PGM_POSPREFIX;

/*--------------------------------------------------------------------------------------------------*/
/*	Programable output																				*/
/*--------------------------------------------------------------------------------------------------*/
typedef enum enum_PGM_POUT
{
	PGM_POUT_NONACTIVE,
	PGM_POUT_ACTIVE,
	PGM_POUT_ZONE,
	PGM_POUT_PREVIOUS
} PGM_POUT;

/*--------------------------------------------------------------------------------------------------*/
/*	Event flag 																						*/
/*--------------------------------------------------------------------------------------------------*/
typedef enum enum_PGM_EVFLG
{
	PGM_EVFLG_NO,
	PGM_EVFLG_INPOS,
	PGM_EVFLG_NEAR,
	PGM_EVFLG_DEN,
	PGM_EVFLG_SEL,
	PGM_EVFLG_PREVIOUS
/*	PGM_EVFLG_TLIM, */
} PGM_EVFLG;

/*--------------------------------------------------------------------------------------------------*/
/*	PGM Sequence 	 																				*/
/*--------------------------------------------------------------------------------------------------*/
typedef enum enum_PGM_SEQ
{
	PGM_SEQ_NOP,
	PGM_SEQ_STORE,
	PGM_SEQ_STORE_ERS,
	PGM_SEQ_STORE_PGM,
	PGM_SEQ_INIT,
	PGM_SEQ_INIT_ERS,
	PGM_SEQ_INIT_PGM,
	PGM_SEQ_INIT_CACHE
} PGM_SEQ;


/****************************************************************************************************/
/*																									*/
/*	Program Table Struct Definition																	*/
/*																									*/
/****************************************************************************************************/
typedef struct _POUTS
{
	UINT  POut0 : 2;					    /* Programable output signal 0 */
	UINT  POut1 : 2;					    /* Programable output signal 1 */
	UINT  POut2 : 2;					    /* Programable output signal 2 */
	UINT  POut3 : 2;					    /* Programable output signal 3 */
/*--------------------------------------------------------------------------------------------------*/
	UINT  POut4 : 2;					    /* Programable output signal 4 */
	UINT  POut5 : 2;					    /* Programable output signal 5 */
	UINT  POut6 : 2;					    /* Programable output signal 6 */
	UINT  POut7 : 2;					    /* Programable output signal 7 */
/*--------------------------------------------------------------------------------------------------*/
	UINT  Reserve : 16;                     /* Reserved                    */
}POUTS;

/*--------------------------------------------------------------------------------------------------*/
typedef struct _PGMDEF
{
	POUTS Pouts;                            /* Programable output signals */
/*--------------------------------------------------------------------------------------------------*/
/*  以下char形の領域はチェックサムの計算のため、配置変更不可!!                                      */
/*--------------------------------------------------------------------------------------------------*/
	char PosPrefix;							/* Position Prefix */
	char EvFlg;    							/* Event flag */
	char EvSel;								/* Event selection */
	char Next;								/* Next step number (-1 ~ 127) */
/*--------------------------------------------------------------------------------------------------*/
	int Pos;								/* Position */
	int Spd;								/* Speed */
	int RDst;								/* Registration distination position */
	int RSpd;								/* Registration speed */
	int Tlim;								/* Torque Limit */
	int Acc;								/* Acceration */
	int Dec;								/* Deceleration */
	int EvTime;								/* Event time */
	int nLoop;								/* Loop number */
} PGMDEF;

/*--------------------------------------------------------------------------------------------------*/
/*  Program Table Object                                                                            */
/*--------------------------------------------------------------------------------------------------*/
typedef struct _PGMT
{
	USHORT CkSum;					/* program table checksum */
	USHORT Ver;						/* program table version */
	PGMDEF Row[ PGM_N_PGM ];        /* program table data rows */
} PGMT;

/*--------------------------------------------------------------------------------------------------*/
/*  Program Table Variable                                                                          */
/*--------------------------------------------------------------------------------------------------*/
typedef struct _PGMV
{
	UCHAR Seq;						/* program table store/init sequence step */
	UCHAR Idx;						/* cache copy index */
	CHAR ReqId;						/* program table request id */
	CHAR FlReqId;					/* flash IF request id */
} PGMV;


/*--------------------------------------------------------------------------------------------------*/
/*	PosPrefix Min/Max 																				*/
/*--------------------------------------------------------------------------------------------------*/
enum enum_PGM_PosPrefixMinMax
{
	PGM_POSPREFIX_MIN = PGM_POSPREFIX_STOP,
	PGM_POSPREFIX_MAX = PGM_POSPREFIX_ASTOP
}; 

/*--------------------------------------------------------------------------------------------------*/
/*	Pos Min/Max 																					*/
/*--------------------------------------------------------------------------------------------------*/
enum enum_PGM_PosMinMax
{
	PGM_POS_MIN = -99999999,
	PGM_POS_MAX =  99999999
};

/*--------------------------------------------------------------------------------------------------*/
/*	Spd Min/Max 																					*/
/*--------------------------------------------------------------------------------------------------*/
enum enum_PGM_SpdMinMax
{
	PGM_SPD_MIN = 1,
	PGM_SPD_MAX = 99999999
};

/*--------------------------------------------------------------------------------------------------*/
/*	Registration Distination Min/Max 																*/
/*--------------------------------------------------------------------------------------------------*/
enum enum_PGM_RDstMinMax
{
	PGM_RDST_MIN = -1,
	PGM_RDST_MAX = 99999999
};

/*--------------------------------------------------------------------------------------------------*/
/*	Registration Speed Min/Max		 																*/
/*--------------------------------------------------------------------------------------------------*/
enum enum_PGM_RSpdMinMax
{
	PGM_RSPD_MIN = 1,
	PGM_RSPD_MAX = 99999999
};

/*--------------------------------------------------------------------------------------------------*/
/*	Acceleration Min/Max			 																*/
/*--------------------------------------------------------------------------------------------------*/
enum enum_PGM_AccMinMax
{
	PGM_ACC_MIN = 0,
	PGM_ACC_MAX = 99999999
};

/*--------------------------------------------------------------------------------------------------*/
/*	Deceleration Min/Max			 																*/
/*--------------------------------------------------------------------------------------------------*/
enum enum_PGM_DecMinMax
{
	PGM_DEC_MIN = 0,
	PGM_DEC_MAX = 99999999
};

/*--------------------------------------------------------------------------------------------------*/
/*	POUT Min/Max			 																		*/
/*--------------------------------------------------------------------------------------------------*/
enum enum_PGM_PoutMinMax
{
	PGM_POUT_MIN = PGM_POUT_NONACTIVE,
	PGM_POUT_MAX = PGM_POUT_PREVIOUS
};

/*--------------------------------------------------------------------------------------------------*/
/*	EvFlag Min/Max			 																		*/
/*--------------------------------------------------------------------------------------------------*/
enum enum_PGM_EvFlgMinMax
{
	PGM_EVFLG_MIN = PGM_EVFLG_NO,
	PGM_EVFLG_MAX = PGM_EVFLG_PREVIOUS
};

/*--------------------------------------------------------------------------------------------------*/
/*	EvSel Min/Max			 																		*/
/*--------------------------------------------------------------------------------------------------*/
enum enum_PGM_EvSelMinMax
{
	PGM_EVSEL_MIN = 0,
	PGM_EVSEL_MAX = 7
};

/*--------------------------------------------------------------------------------------------------*/
/*	EvTime Min/Max			 																		*/
/*--------------------------------------------------------------------------------------------------*/
enum enum_PGM_EvTimeMinMax
{
	PGM_EVTIME_MIN = 0,
	PGM_EVTIME_MAX = 99999 
};

/*--------------------------------------------------------------------------------------------------*/
/*	Loop Min/Max			 																		*/
/*--------------------------------------------------------------------------------------------------*/
enum enum_PGM_nLoopMinMax
{
	PGM_NLOOP_MIN = 1,
	PGM_NLOOP_MAX = 99999 
};

/*--------------------------------------------------------------------------------------------------*/
/*	Next Min/Max			 																		*/
/*--------------------------------------------------------------------------------------------------*/
enum enum_PGM_NextMinMax
{
	PGM_NEXT_MIN = -1,
	PGM_NEXT_MAX = (PGM_N_PGM-1),
};

/*--------------------------------------------------------------------------------------------------*/
/*	Tlim Min/Max			 																		*/
/*--------------------------------------------------------------------------------------------------*/
enum enum_PGM_TlimMinMax
{
	PGM_TLIM_MIN = -1,
	PGM_TLIM_MAX = 800
};

/*--------------------------------------------------------------------------------------------------*/
/*	Grobal Pgm Cache Variable  																		*/
/*--------------------------------------------------------------------------------------------------*/
#ifdef	__ghs__
#pragma ghs startzda
#pragma ghs section zbss = ".TBLCACHE"
#endif
extern PGMT PgmCache;							/* Program Table Cache                              */
#ifdef	__ghs__
#pragma ghs section zbss = default
#pragma ghs endzda
#endif

/*--------------------------------------------------------------------------------------------------*/
/*  Pgm Row Number Definition (for Register Interface)  											*/
/*--------------------------------------------------------------------------------------------------*/
enum _PGM_ROWS
{
	RNPGM_POSPREFIX = 0,   /* 0: PosPrefix */
	RNPGM_POS,             /* 1: Pos */
	RNPGM_SPD,             /* 2: Spd */
	RNPGM_TLIM,            /* 3: Tlim */
/*--------------------------------------------------------------------------------------------------*/
	RNPGM_RDST,            /* 4: RDst */
	RNPGM_RSPD,            /* 5: RSpd */
	RNPGM_ACC,             /* 6: Acc */
	RNPGM_DEC,             /* 7: Dec */
/*--------------------------------------------------------------------------------------------------*/
	RNPGM_POUT0,           /* 8: Pout0 */
	RNPGM_POUT1,           /* 9: Pout1 */
	RNPGM_POUT2,           /*10: Pout2 */
	RNPGM_POUT3,           /*11: Pout3 */
/*--------------------------------------------------------------------------------------------------*/
	RNPGM_POUT4,           /*12: Pout4 */
	RNPGM_POUT5,           /*13: Pout5 */
	RNPGM_POUT6,           /*14: Pout6 */
	RNPGM_POUT7,           /*15: Pout7 */
/*--------------------------------------------------------------------------------------------------*/
	RNPGM_EVFLG,           /*16: EvFlg */
	RNPGM_EVSEL,           /*17: EvSel */
	RNPGM_EVTIME,          /*18: EvTime */
	RNPGM_NLOOP,           /*19: Loop */
/*--------------------------------------------------------------------------------------------------*/
	RNPGM_NEXT,            /*20: Next */
/*--------------------------------------------------------------------------------------------------*/
	RNPGM_TOTALROWS,
};

/*--------------------------------------------------------------------------------------------------*/
